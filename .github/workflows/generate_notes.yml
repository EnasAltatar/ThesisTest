name: Run AI Note Generation (First 500)

on:
  workflow_dispatch:  # manual run

jobs:
  run-500:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # max allowed

    env:
      # === API Keys (from repo Secrets) ===
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

      # === Models & Roles ===
      GPT_MODEL: gpt-4o-mini
      # Use rolling alias to avoid deprecation warnings
      CLAUDE_MODEL: claude-3-5-sonnet-latest
      DEEPSEEK_MODEL: deepseek-chat
      DEEPSEEK_R: deepseek-reasoner

      # CADSS role routing (easy to A/B without code changes)
      CADSS_GENERATOR: gpt       # gpt | claude | deepseek
      CADSS_REVIEWER: deepseek   # gpt | claude | deepseek
      CADSS_SYNTH: claude        # claude | gpt | deepseek

      # === Input / Output ===
      INPUT_EXCEL: synthetic_breast_cancer_1000.xlsx
      INPUT_SHEET: Sheet1
      OUT_DIR: outputs
      SOURCES: gpt,claude,deepseek,cadss

      # === Run just the first 500 rows ===
      START_ROW: 0
      ROW_LIMIT: 500
      PER_CASE_SLEEP: 0.5

      # Temperatures (stable but not flat)
      GEN_TEMPERATURE: "0.2"
      REV_TEMPERATURE: "0.3"
      SYN_TEMPERATURE: "0.2"

      # Safe resume: skip cases already present in outputs/AI_Recommendations.csv
      SKIP_COMPLETED: "true"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          echo ">>> Installing dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install openai anthropic httpx pandas openpyxl python-dotenv tenacity
          echo ">>> Installed packages:"
          pip list | grep -E "openai|anthropic|httpx|pandas|openpyxl|tenacity|python-dotenv"

      - name: Check Excel sheet names
        run: |
          python - << 'PY'
          import openpyxl
          wb = openpyxl.load_workbook("synthetic_breast_cancer_1000.xlsx", read_only=True)
          print("Sheet names:", wb.sheetnames)
          PY

      - name: Run generator (first 500)
        run: |
          echo ">>> Running generator for rows $START_ROW..$((START_ROW+ROW_LIMIT-1))"
          python scripts/generate_ai_notes.py
          echo ">>> Generator completed."
          echo ">>> Listing outputs/"
          ls -la "$OUT_DIR" || true

      - name: Upload generated outputs (raw)
        uses: actions/upload-artifact@v4
        with:
          name: ai_outputs_0_499
          path: outputs/

      - name: Prepare cleanup input
        run: |
          if [ -f "outputs/AI_Recommendations.csv" ]; then
            cp "outputs/AI_Recommendations.csv" "AI RECOMMENDATIONS.csv"
          else
            echo "WARNING: outputs/AI_Recommendations.csv not found. Listing files:"
            ls -la outputs || true
            exit 1
          fi

      - name: Run cleanup script
        run: |
          echo ">>> Running cleanup..."
          python scripts/cleanup_ai_recommendations.py
          echo ">>> Cleanup finished."
          mkdir -p outputs
          mv -f "AI_RECOMMENDATIONS_CLEAN.csv" "outputs/AI_RECOMMENDATIONS_CLEAN_0_499.csv" || true
          ls -la outputs || true

      - name: Upload cleaned CSV
        uses: actions/upload-artifact@v4
        with:
          name: ai_outputs_clean_0_499
          path: outputs/AI_RECOMMENDATIONS_CLEAN_0_499.csv
