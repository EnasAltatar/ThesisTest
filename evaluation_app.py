import streamlit as st
import pandas as pd
from datetime import datetime
import os
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from io import BytesIO
import base64

st.set_page_config(page_title="AI vs Human Chemotherapy Evaluation", layout="wide")

# ------------------
# Function: Convert DF to Excel for Download
# ------------------
def convert_df_to_excel(df):
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    df.to_excel(writer, index=False, sheet_name='Evaluation Report')
    writer.save()
    return output.getvalue()

# ------------------
# Introduction Section
# ------------------
st.markdown("""
<style>
.big-title {
    font-size: 32px;
    color: #2c3e50;
    font-weight: bold;
}
.subheader {
    font-size: 18px;
    color: #34495e;
    margin-top: -10px;
    margin-bottom: 20px;
}
.section-title {
    font-size: 24px;
    color: #1f77b4;
    margin-top: 30px;
}
</style>
""", unsafe_allow_html=True)

st.markdown('<div class="big-title">ðŸŽ“ PSUT Thesis Evaluation Interface</div>', unsafe_allow_html=True)
st.markdown('<div class="subheader">Master\'s Research by Enas Tatar - Health Information Technology, PSUT</div>', unsafe_allow_html=True)

st.info("""
This platform is part of an academic research project evaluating the clinical quality and safety of chemotherapy recommendations generated by AI vs. human pharmacists.

ðŸ”’ Each case can be evaluated only once.
âœ… Please select an available case from the list below.
""")

# ------------------
# Evaluator Info Sidebar
# ------------------
st.sidebar.header("Evaluator Details")
evaluator_id = st.sidebar.text_input("Evaluator ID")
is_admin = evaluator_id.lower().strip() == "admin"
st.sidebar.markdown("---")

# ------------------
# Connect to Google Sheet and Load Evaluated Case IDs
# ------------------
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(st.secrets["GOOGLE_APPLICATION_CREDENTIALS"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet_url = "https://docs.google.com/spreadsheets/d/1MsXao47OMA715hwvpDhHoAimcEYJtjrqbK7Ed9wXw0c"
sheet = client.open_by_url(sheet_url).sheet1
records = sheet.get_all_records()
evaluated_df = pd.DataFrame(records)
evaluated_cases = evaluated_df["Case ID"].unique().tolist() if not evaluated_df.empty else []

# ------------------
# Admin Dashboard View
# ------------------
if is_admin:
    st.markdown('<div class="section-title">ðŸ“Š Admin Dashboard</div>', unsafe_allow_html=True)
    st.write("### Summary of Evaluated Cases")
    st.write(f"Total Evaluations: {len(evaluated_df)}")
    st.write("Breakdown by Evaluator:")
    st.dataframe(evaluated_df.groupby("Evaluator ID")["Case ID"].count().reset_index(name="Evaluated Cases"))

    if "Complexity" in evaluated_df.columns:
        st.write("Breakdown by Complexity:")
        st.dataframe(evaluated_df["Complexity"].value_counts().reset_index().rename(columns={"index": "Complexity", "Complexity": "Count"}))

    st.write("Unassigned Cases:")
    if os.path.exists("cases.csv"):
        all_cases = pd.read_csv("cases.csv")
        unassigned_cases = all_cases[~all_cases["Case ID"].isin(evaluated_cases)]
        st.dataframe(unassigned_cases)

    if st.button("ðŸ“¥ Export Evaluation Report to Excel"):
        excel_data = convert_df_to_excel(evaluated_df)
        b64 = base64.b64encode(excel_data).decode()
        href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="evaluation_report.xlsx">Download Excel File</a>'
        st.markdown(href, unsafe_allow_html=True)

    st.stop()

# ------------------
# Load Available Cases
# ------------------
if os.path.exists("cases.csv"):
    all_cases = pd.read_csv("cases.csv")
else:
    all_cases = pd.DataFrame(columns=["Case ID", "Medications", "Dosages", "Lab Tests", "Notes"])

available_cases = all_cases[~all_cases["Case ID"].isin(evaluated_cases)]

# ------------------
# Component 0: Case Selection
# ------------------
st.markdown('<div class="section-title">Component 0: Select Case</div>', unsafe_allow_html=True)

if not available_cases.empty:
    selected_case = st.selectbox("Select Case ID", available_cases["Case ID"])
    selected_data = available_cases[available_cases["Case ID"] == selected_case].iloc[0]

    st.markdown(f"**Medications:** {selected_data.get('Medications', '')}")
    st.markdown(f"**Dosages:** {selected_data.get('Dosages', '')}")
    st.markdown(f"**Lab Tests:** {selected_data.get('Lab Tests', '')}")
    st.markdown(f"**Pharmacist Notes:** {selected_data.get('Notes', '')}")

    cancer_type = st.selectbox("Select Diagnosis", [
        "Breast Cancer", "Lung Cancer", "Colorectal Cancer", "Lymphoma", "Gastric Cancer", "Other"
    ])

    regimen = st.text_input("Enter Regimen Name")

    complexity = st.selectbox("Select Case Complexity", [
        "Simple", "Intermediate", "Complex"
    ])
else:
    st.warning("All cases have been evaluated. No available cases remain.")
    st.stop()

recommendation_text = st.text_area("Paste or view the recommendation", height=200)

# ------------------
# Component 1: PCNE V9.1 Classification
# ------------------
st.markdown('<div class="section-title">Component 1: PCNE Classification</div>', unsafe_allow_html=True)

problem_code = st.selectbox("Problem (P)", [
    "P1.1 â€“ No effect despite correct use",
    "P1.2 â€“ Effect not optimal",
    "P1.3 â€“ Untreated indication",
    "P1.4 â€“ Preventive treatment not given",
    "P2.1 â€“ Adverse event occurring",
    "P2.2 â€“ Potential adverse event",
    "P3.1 â€“ Unnecessary treatment",
    "P3.2 â€“ Inappropriate drug form",
    "P3.3 â€“ Documentation issue"
])

cause_code = st.selectbox("Cause (C)", [
    "C1.1 â€“ Inappropriate drug",
    "C1.2 â€“ No drug for indication",
    "C2.1 â€“ Dose too high",
    "C2.2 â€“ Dose too low",
    "C3.1 â€“ Duration too short",
    "C3.2 â€“ Duration too long",
    "C4.1 â€“ Inappropriate form",
    "C5.1 â€“ Route/timing issue",
    "C6.1 â€“ Patient use issue",
    "C7.1 â€“ Logistics (stock)",
    "C8.1 â€“ Patient non-adherence",
    "C9.1 â€“ Monitoring problem"
])

intervention_code = st.selectbox("Intervention (I)", [
    "I1.1 â€“ Change therapy",
    "I1.2 â€“ Change dose/frequency",
    "I1.3 â€“ Discontinue drug",
    "I2.1 â€“ Patient education",
    "I3.1 â€“ Substitute drug"
])

outcome_code = st.selectbox("Outcome (O)", [
    "O0 â€“ Unknown",
    "O1 â€“ Solved",
    "O2 â€“ Partially solved",
    "O3 â€“ Not solved",
    "O4 â€“ No intervention possible"
])

severity = st.radio("Severity of Problem", ["1 â€“ Minor", "2 â€“ Moderate", "3 â€“ Major"])

# ------------------
# Component 2: Stanford Rubric
# ------------------
st.markdown('<div class="section-title">Component 2: Stanford Evaluation Rubric</div>', unsafe_allow_html=True)
rubric_scores = {}
rubric_fields = [
    "Clinical Accuracy",
    "Clinical Appropriateness",
    "Safety Considerations",
    "Clarity of Rationale",
    "Completeness",
    "Institutional Compliance"
]
for field in rubric_fields:
    rubric_scores[field] = st.slider(field, 1, 5, 3)

# ------------------
# Component 3: Evaluator Feedback (Optional)
# ------------------
st.markdown('<div class="section-title">Component 3: Evaluator Feedback</div>', unsafe_allow_html=True)
evaluator_feedback = st.text_area("Was this case realistic / relevant / clear? (Optional)")

# ------------------
# Comments and Submission
# ------------------
st.subheader("Evaluator Comments")
comments = st.text_area("Additional Notes / Justification")

if st.button("Submit Evaluation"):
    result = {
        "Timestamp": datetime.now(),
        "Evaluator ID": evaluator_id,
        "Case ID": selected_case,
        "Cancer Type": cancer_type,
        "Regimen": regimen,
        "Complexity": complexity,
        "Recommendation": recommendation_text,
        "PCNE_Problem": problem_code,
        "PCNE_Cause": cause_code,
        "PCNE_Intervention": intervention_code,
        "PCNE_Outcome": outcome_code,
        "PCNE_Severity": severity,
        **{f"Stanford_{field}": rubric_scores[field] for field in rubric_fields},
        "Evaluator Comments": comments,
        "Evaluator Feedback": evaluator_feedback
    }

    sheet.append_row([
        str(result["Timestamp"]),
        result["Evaluator ID"],
        result["Case ID"],
        result["Cancer Type"],
        result["Regimen"],
        result["Complexity"],
        result["Recommendation"],
        result["PCNE_Problem"],
        result["PCNE_Cause"],
        result["PCNE_Intervention"],
        result["PCNE_Outcome"],
        result["PCNE_Severity"],
        result["Stanford_Clinical Accuracy"],
        result["Stanford_Clinical Appropriateness"],
        result["Stanford_Safety Considerations"],
        result["Stanford_Clarity of Rationale"],
        result["Stanford_Completeness"],
        result["Stanford_Institutional Compliance"],
        result["Evaluator Comments"],
        result["Evaluator Feedback"]
    ])

    st.success("Evaluation submitted and saved to Google Sheets! âœ…")
