import streamlit as st
import pandas as pd
from datetime import datetime
import os

st.set_page_config(page_title="AI vs Human Chemotherapy Evaluation", layout="wide")

# ------------------
# Introduction Section
# ------------------
st.markdown("""
<style>
.big-title {
    font-size: 32px;
    color: #2c3e50;
    font-weight: bold;
}
.subheader {
    font-size: 18px;
    color: #34495e;
    margin-top: -10px;
    margin-bottom: 20px;
}
.section-title {
    font-size: 24px;
    color: #1f77b4;
    margin-top: 30px;
}
</style>
""", unsafe_allow_html=True)

st.markdown('<div class="big-title">ðŸŽ“ PSUT Thesis Evaluation Interface</div>', unsafe_allow_html=True)
st.markdown('<div class="subheader">Master\'s Research by Enas Tatar - Health Information Technology, PSUT</div>', unsafe_allow_html=True)

st.info("""
This platform is part of an academic research project evaluating the clinical quality and safety of chemotherapy recommendations generated by AI vs. human pharmacists.

ðŸ”’ Each case can be evaluated only once.
âœ… Please select an available case from the list below.
""")

# ------------------
# Load Available Cases
# ------------------
if os.path.exists("cases.csv"):
    all_cases = pd.read_csv("cases.csv")
else:
    all_cases = pd.DataFrame(columns=["Case ID", "Diagnosis", "Regimen", "Complexity"])

if os.path.exists("evaluations_log.csv"):
    evaluated = pd.read_csv("evaluations_log.csv")
    evaluated_cases = evaluated["Case ID"].unique().tolist()
else:
    evaluated_cases = []

available_cases = all_cases[~all_cases["Case ID"].isin(evaluated_cases)]

# ------------------
# Sidebar: Evaluator Info
# ------------------
st.sidebar.header("Evaluator Details")
evaluator_id = st.sidebar.text_input("Evaluator ID")
st.sidebar.markdown("---")

# ------------------
# Component 0: Case Selection
# ------------------
st.markdown('<div class="section-title">Component 0: Select Case</div>', unsafe_allow_html=True)

if not available_cases.empty:
    selected_case = st.selectbox("Select Case ID", available_cases["Case ID"])
    selected_data = available_cases[available_cases["Case ID"] == selected_case].iloc[0]
    cancer_type = selected_data["Diagnosis"]
    regimen = selected_data["Regimen"]
    complexity = selected_data["Complexity"]
else:
    st.warning("All cases have been evaluated. No available cases remain.")
    st.stop()

recommendation_text = st.text_area("Paste or view the recommendation", height=200)

# ------------------
# Component 1: PCNE V9.1 Classification
# ------------------
st.markdown('<div class="section-title">Component 1: PCNE Classification</div>', unsafe_allow_html=True)

problem_code = st.selectbox("Problem (P)", [
    "P1.1 â€“ No effect despite correct use",
    "P1.2 â€“ Effect not optimal",
    "P1.3 â€“ Untreated indication",
    "P1.4 â€“ Preventive treatment not given",
    "P2.1 â€“ Adverse event occurring",
    "P2.2 â€“ Potential adverse event",
    "P3.1 â€“ Unnecessary treatment",
    "P3.2 â€“ Inappropriate drug form",
    "P3.3 â€“ Documentation issue"
])

cause_code = st.selectbox("Cause (C)", [
    "C1.1 â€“ Inappropriate drug",
    "C1.2 â€“ No drug for indication",
    "C2.1 â€“ Dose too high",
    "C2.2 â€“ Dose too low",
    "C3.1 â€“ Duration too short",
    "C3.2 â€“ Duration too long",
    "C4.1 â€“ Inappropriate form",
    "C5.1 â€“ Route/timing issue",
    "C6.1 â€“ Patient use issue",
    "C7.1 â€“ Logistics (stock)",
    "C8.1 â€“ Patient non-adherence",
    "C9.1 â€“ Monitoring problem"
])

intervention_code = st.selectbox("Intervention (I)", [
    "I1.1 â€“ Change therapy",
    "I1.2 â€“ Change dose/frequency",
    "I1.3 â€“ Discontinue drug",
    "I2.1 â€“ Patient education",
    "I3.1 â€“ Substitute drug"
])

outcome_code = st.selectbox("Outcome (O)", [
    "O0 â€“ Unknown",
    "O1 â€“ Solved",
    "O2 â€“ Partially solved",
    "O3 â€“ Not solved",
    "O4 â€“ No intervention possible"
])

severity = st.radio("Severity of Problem", ["1 â€“ Minor", "2 â€“ Moderate", "3 â€“ Major"])

# ------------------
# Component 2: Stanford Rubric
# ------------------
st.markdown('<div class="section-title">Component 2: Stanford Evaluation Rubric</div>', unsafe_allow_html=True)
rubric_scores = {}
rubric_fields = [
    "Clinical Accuracy",
    "Clinical Appropriateness",
    "Safety Considerations",
    "Clarity of Rationale",
    "Completeness",
    "Institutional Compliance"
]
for field in rubric_fields:
    rubric_scores[field] = st.slider(field, 1, 5, 3)

# ------------------
# Comments and Submission
# ------------------
st.subheader("Evaluator Comments")
comments = st.text_area("Additional Notes / Justification")

if st.button("Submit Evaluation"):
    result = {
        "Timestamp": datetime.now(),
        "Evaluator ID": evaluator_id,
        "Case ID": selected_case,
        "Cancer Type": cancer_type,
        "Regimen": regimen,
        "Complexity": complexity,
        "Recommendation": recommendation_text,
        "PCNE_Problem": problem_code,
        "PCNE_Cause": cause_code,
        "PCNE_Intervention": intervention_code,
        "PCNE_Outcome": outcome_code,
        "PCNE_Severity": severity,
        **{f"Stanford_{field}": rubric_scores[field] for field in rubric_fields},
        "Evaluator Comments": comments
    }

    import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Connect to Google Sheet
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
#creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)

import json
import streamlit as st

from oauth2client.service_account import ServiceAccountCredentials

# Load credentials from Streamlit secrets
creds_dict = json.loads(st.secrets["GOOGLE_APPLICATION_CREDENTIALS"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

# Open your Google Sheet
sheet = client.open("evaluations_log").sheet1

# Append the result row
sheet.append_row([
    str(result["Timestamp"]),
    result["Evaluator ID"],
    result["Case ID"],
    result["Cancer Type"],
    result["Regimen"],
    result["Complexity"],
    result["Recommendation"],
    result["PCNE_Problem"],
    result["PCNE_Cause"],
    result["PCNE_Intervention"],
    result["PCNE_Outcome"],
    result["PCNE_Severity"],
    result["Stanford_Clinical Accuracy"],
    result["Stanford_Clinical Appropriateness"],
    result["Stanford_Safety Considerations"],
    result["Stanford_Clarity of Rationale"],
    result["Stanford_Completeness"],
    result["Stanford_Institutional Compliance"],
    result["Evaluator Comments"]
])

st.success("Evaluation submitted and saved to Google Sheets! âœ…")
